# ===================================================================
# COMMON SPRING BOOT PROPERTIES
#
# This sample file is provided as a guideline.
# Do NOT copy it in its entirety to your own application.
# ===================================================================


# -----------------------------------------------------------------------------
# CORE PROPERTIES
# -----------------------------------------------------------------------------

# -------------------------------------
# BANNER

# Banner file encoding.
# banner.charset=UTF-8

# Banner file location.
# banner.location=classpath:banner.txt

# Banner image file location (jpg/png can also be used).
# banner.image.location=classpath:banner.gif

# Width of the banner image in chars (default 76)
# banner.image.width=

# Height of the banner image in chars (default based on image height)
# banner.image.height=

# Left hand image margin in chars (default 2)
# banner.image.margin=

# If images should be inverted for dark terminal themes (default false)
# banner.image.invert=


# -------------------------------------
# LOGGING

# Location of the logging configuration file.
# For instance `classpath:logback.xml` for Logback
# logging.config=

# Conversion word used when logging exceptions.
# logging.exception-conversion-word=%wEx

# Log file name.
# For instance `myapp.log`
# logging.file=

# Log levels severity mapping.
# For instance `logging.level.org.springframework=DEBUG`
# logging.level.*=

# Location of the log file.
# For instance `/var/log`
# logging.path=

# Appender pattern for output to the console.
# Only supported with the default logback setup.
# logging.pattern.console=

# Appender pattern for output to the file.
# Only supported with the default logback setup.
# logging.pattern.file=

# Appender pattern for log level (default %5p).
# Only supported with the default logback setup.
# logging.pattern.level=

# Register a shutdown hook for the logging system when it is initialized.
# logging.register-shutdown-hook=false


# -------------------------------------
# AOP

# Add @EnableAspectJAutoProxy.
# spring.aop.auto=true

# Whether subclass-based (CGLIB) proxies are to be created (true) as opposed to
# standard Java interface-based proxies (false).
# Defaults to "true" when using Spring Transaction Management, otherwise "false".
# spring.aop.proxy-target-class=


# -------------------------------------
# IDENTITY (ContextIdApplicationContextInitializer)

# Application index.
# spring.application.index=

# Application name.
spring.application.name=$PROJECT_NAME


# -------------------------------------
# ADMIN (SpringApplicationAdminJmxAutoConfiguration)

# Enable admin features for the application.
# spring.application.admin.enabled=false

# JMX name of the application admin MBean.
# spring.application.admin.jmx-name=org.springframework.boot:type=Admin,name=SpringApplication


# -------------------------------------
# AUTO-CONFIGURATION

# Auto-configuration classes to exclude.
# spring.autoconfigure.exclude=


# -------------------------------------
# SPRING CORE

# Skip search of BeanInfo classes.
# spring.beaninfo.ignore=true


# -------------------------------------
# SPRING CACHE (CacheProperties)

# Comma-separated list of cache names to create if supported by the underlying
# cache manager.
# spring.cache.cache-names=

# The spec to use to create caches.
# Check CaffeineSpec for more details on the spec format.
# spring.cache.caffeine.spec=

# Entry expiration in milliseconds.
# By default the entries never expire.
# spring.cache.couchbase.expiration=0

# The location of the configuration file to use to initialize EhCache.
# spring.cache.ehcache.config=

# The spec to use to create caches.
# Check CacheBuilderSpec for more details on the spec format.
# spring.cache.guava.spec=

# The location of the configuration file to use to initialize Infinispan.
# spring.cache.infinispan.config=

# The location of the configuration file to use to initialize the cache manager.
# spring.cache.jcache.config=

# Fully qualified name of the CachingProvider implementation to use to retrieve
# the JSR-107 compliant cache manager.
# Only needed if more than one JSR-107 implementation is available on the classpath.
# spring.cache.jcache.provider=

# Cache type, auto-detected according to the environment by default.
# spring.cache.type=


# -------------------------------------
# SPRING CONFIG - using environment property only (ConfigFileApplicationListener)

# Config file locations.
# spring.config.location=

# Config file name.
# spring.config.name=application


# -------------------------------------
# HAZELCAST (HazelcastProperties)

# The location of the configuration file to use to initialize Hazelcast.
# spring.hazelcast.config=


# -------------------------------------
# PROJECT INFORMATION (ProjectInfoProperties)

# Location of the generated build-info.properties file.
# spring.info.build.location=classpath:META-INF/build-info.properties

# Location of the generated git.properties file.
# spring.info.git.location=classpath:git.properties


# -------------------------------------
# JMX

# JMX domain name.
# spring.jmx.default-domain=

# Expose management beans to the JMX domain.
# spring.jmx.enabled=true

# MBeanServer bean name.
# spring.jmx.server=mbeanServer


# -------------------------------------
# Email (MailProperties)

# Default MimeMessage encoding.
# spring.mail.default-encoding=UTF-8

# SMTP server host.
# For instance `smtp.example.com`
# spring.mail.host=

# Session JNDI name.
# When set, takes precedence to others mail settings.
# spring.mail.jndi-name=

# Login password of the SMTP server.
# spring.mail.password=

# SMTP server port.
# spring.mail.port=

# Additional JavaMail session properties.
# spring.mail.properties.*=

# Protocol used by the SMTP server.
# spring.mail.protocol=smtp

# Test that the mail server is available on startup.
# spring.mail.test-connection=false

# Login user of the SMTP server.
# spring.mail.username=


# -------------------------------------
# APPLICATION SETTINGS (SpringApplication)

# Mode used to display the banner when the application runs.
# spring.main.banner-mode=console

# Sources (class name, package name or XML resource location) to include in
# the ApplicationContext.
# spring.main.sources=

# Run the application in a web environment (auto-detected by default).
# spring.main.web-environment=


# -------------------------------------
# FILE ENCODING (FileEncodingApplicationListener)

# Expected character encoding the application must use.
# spring.mandatory-file-encoding=


# -------------------------------------
# INTERNATIONALIZATION (MessageSourceAutoConfiguration)

# Set whether to always apply the MessageFormat rules, parsing even messages
# without arguments.
# spring.messages.always-use-message-format=false

# Comma-separated list of basenames (essentially a fully-qualified classpath location),
# each following the ResourceBundle convention with relaxed support for
# slash based locations.
# spring.messages.basename=messages

# Loaded resource bundle files cache expiration, in seconds.
# When set to -1, bundles are cached forever.
# spring.messages.cache-seconds=-1

# Message bundles encoding.
# spring.messages.encoding=UTF-8

# Set whether to fall back to the system Locale if no files for a specific
# Locale have been found.
# spring.messages.fallback-to-system-locale=true


# -------------------------------------
# OUTPUT

# Configure the ANSI output.
# spring.output.ansi.enabled=detect


# -------------------------------------
# PID FILE (ApplicationPidFileWriter)

# Fail if ApplicationPidFileWriter is used but it cannot write the PID file.
# spring.pid.fail-on-write-error=

# Location of the PID file to write (if ApplicationPidFileWriter is used).
# spring.pid.file=


# -------------------------------------
# PROFILES

# Comma-separated list (or list if using YAML) of active profiles.
# spring.profiles.active=

# Unconditionally activate the specified comma separated profiles (or list of
# profiles if using YAML).
# spring.profiles.include=


# -------------------------------------
# SENDGRID (SendGridAutoConfiguration)

# SendGrid api key (alternative to username/password).
# spring.sendgrid.api-key=

# SendGrid account username.
# spring.sendgrid.username=

# SendGrid account password.
# spring.sendgrid.password=

# SendGrid proxy host.
# spring.sendgrid.proxy.host=

# SendGrid proxy port.
# spring.sendgrid.proxy.port=


# -----------------------------------------------------------------------------
# WEB PROPERTIES
# -----------------------------------------------------------------------------

# -------------------------------------
# EMBEDDED SERVER CONFIGURATION (ServerProperties)

# Network address to which the server should bind to.
# server.address=

# If response compression is enabled.
# server.compression.enabled=false

# List of user-agents to exclude from compression.
# server.compression.excluded-user-agents=

# Comma-separated list of MIME types that should be compressed.
# server.compression.mime-types=text/html,text/xml,text/plain,text/css,text/javascript,application/javascript

# Minimum response size that is required for compression to be performed.
# server.compression.min-response-size=2048

# Time in milliseconds that connectors will wait for another HTTP request
# before closing the connection.
# When not set, the connector's container-specific default will be used.
# Use a value of -1 to indicate no (i.e. infinite) timeout.
# server.connection-timeout=

# Servlet context init parameters.
# For instance `server.context-parameters.a=alpha`
# server.context-parameters.*=

# Context path of the application.
# server.context-path=

# Display name of the application.
# server.display-name=application

# Maximum size in bytes of the HTTP message header.
# server.max-http-header-size=0

# When to include a "stacktrace" attribute.
# server.error.include-stacktrace=never

# Path of the error controller.
# server.error.path=/error

# Enable the default error page displayed in browsers in case of a server error.
# server.error.whitelabel.enabled=true

# Number of acceptor threads to use.
# server.jetty.acceptors=

# Maximum size in bytes of the HTTP post or put content.
# server.jetty.max-http-post-size=0

# Number of selector threads to use.
# server.jetty.selectors=

# The class name of the JSP servlet.
# server.jsp-servlet.class-name=org.apache.jasper.servlet.JspServlet

# Init parameters used to configure the JSP servlet
# server.jsp-servlet.init-parameters.*=

# Whether or not the JSP servlet is registered
# server.jsp-servlet.registered=true

# Server HTTP port.
# server.port=8080

# Value to use for the Server response header (no header is sent if empty)
# server.server-header=

# Path of the main dispatcher servlet.
# server.servlet-path=/

# If X-Forwarded-* headers should be applied to the HttpRequest.
# server.use-forward-headers=

# Comment for the session cookie.
# server.session.cookie.comment=

# Domain for the session cookie.
# server.session.cookie.domain=

# "HttpOnly" flag for the session cookie.
# server.session.cookie.http-only=

# Maximum age of the session cookie in seconds.
# server.session.cookie.max-age=

# Session cookie name.
# server.session.cookie.name=

# Path of the session cookie.
# server.session.cookie.path=

# "Secure" flag for the session cookie.
# server.session.cookie.secure=

# Persist session data between restarts.
# server.session.persistent=false

# Directory used to store session data.
# server.session.store-dir=

# Session timeout in seconds.
# server.session.timeout=

# Session tracking modes (one or more of the following: "cookie", "url", "ssl").
# server.session.tracking-modes=

# Supported SSL ciphers.
# server.ssl.ciphers=

# Whether client authentication is wanted ("want") or needed ("need").
# Requires a trust store.
# server.ssl.client-auth=

# Enable SSL support.
# server.ssl.enabled=

# Enabled SSL protocols.
# server.ssl.enabled-protocols=

# Alias that identifies the key in the key store.
# server.ssl.key-alias=

# Password used to access the key in the key store.
# server.ssl.key-password=

# Path to the key store that holds the SSL certificate (typically a jks file).
# server.ssl.key-store=

# Password used to access the key store.
# server.ssl.key-store-password=

# Provider for the key store.
# server.ssl.key-store-provider=

# Type of the key store.
# server.ssl.key-store-type=

# SSL protocol to use.
# server.ssl.protocol=TLS

# Trust store that holds SSL certificates.
# server.ssl.trust-store=

# Password used to access the trust store.
# server.ssl.trust-store-password=

# Provider for the trust store.
# server.ssl.trust-store-provider=

# Type of the trust store.
# server.ssl.trust-store-type=

# Maximum queue length for incoming connection requests when all possible
# request processing threads are in use.
# server.tomcat.accept-count=

# Buffer output such that it is only flushed periodically.
# server.tomcat.accesslog.buffered=true

# Directory in which log files are created.
# Can be relative to the tomcat base dir or absolute.
# server.tomcat.accesslog.directory=logs

# Enable access log.
# server.tomcat.accesslog.enabled=false

# Date format to place in log file name.
# server.tomcat.accesslog.file-date-format=.yyyy-MM-dd

# Format pattern for access logs.
# server.tomcat.accesslog.pattern=common

# Log file name prefix.
# server.tomcat.accesslog.prefix=access_log

# Defer inclusion of the date stamp in the file name until rotate time.
# server.tomcat.accesslog.rename-on-rotate=false

# Set request attributes for IP address, Hostname, protocol and port used
# for the request.
# server.tomcat.accesslog.request-attributes-enabled=false

# Enable access log rotation.
# server.tomcat.accesslog.rotate=true

# Log file name suffix.
# server.tomcat.accesslog.suffix=.log

# Comma-separated list of additional patterns that match jars to ignore for
# TLD scanning.
# server.tomcat.additional-tld-skip-patterns=

# Delay in seconds between the invocation of backgroundProcess methods.
# server.tomcat.background-processor-delay=30

# Tomcat base directory.
# If not specified a temporary directory will be used.
# server.tomcat.basedir=

# regular expression matching trusted IP addresses.
# server.tomcat.internal-proxies=10\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}|\\
        # 192\\.168\\.\\d{1,3}\\.\\d{1,3}|\\
        # 169\\.254\\.\\d{1,3}\\.\\d{1,3}|\\
        # 127\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}|\\
        # 172\\.1[6-9]{1}\\.\\d{1,3}\\.\\d{1,3}|\\
        # 172\\.2[0-9]{1}\\.\\d{1,3}\\.\\d{1,3}|\\
        # 172\\.3[0-1]{1}\\.\\d{1,3}\\.\\d{1,3}

# Maximum number of connections that the server will accept and process at
# any given time.
# server.tomcat.max-connections=

# Maximum size in bytes of the HTTP post content.
# server.tomcat.max-http-post-size=0

# Maximum amount of worker threads.
# server.tomcat.max-threads=0

# Minimum amount of worker threads.
# server.tomcat.min-spare-threads=0

# Name of the HTTP header used to override the original port value.
# server.tomcat.port-header=X-Forwarded-Port

# Header that holds the incoming protocol, usually named "X-Forwarded-Proto".
# server.tomcat.protocol-header=

# Value of the protocol header that indicates that the incoming request uses SSL.
# server.tomcat.protocol-header-https-value=https

# Whether requests to the context root should be redirected by appending
# a / to the path.
# server.tomcat.redirect-context-root=

# Name of the http header from which the remote ip is extracted.
# For instance `X-FORWARDED-FOR`
# server.tomcat.remote-ip-header=

# Character encoding to use to decode the URI.
# server.tomcat.uri-encoding=UTF-8

# Undertow access log directory.
# server.undertow.accesslog.dir=

# Enable access log.
# server.undertow.accesslog.enabled=false

# Format pattern for access logs.
# server.undertow.accesslog.pattern=common

# Log file name prefix.
# server.undertow.accesslog.prefix=access_log.

# Enable access log rotation.
# server.undertow.accesslog.rotate=true

# Log file name suffix.
# server.undertow.accesslog.suffix=log

# Size of each buffer in bytes.
# server.undertow.buffer-size=

# Allocate buffers outside the Java heap.
# server.undertow.direct-buffers=

# Number of I/O threads to create for the worker.
# server.undertow.io-threads=

# Maximum size in bytes of the HTTP post content.
# server.undertow.max-http-post-size=0

# Number of worker threads.
# server.undertow.worker-threads=


# -------------------------------------
# FREEMARKER (FreeMarkerAutoConfiguration)

# Set whether HttpServletRequest attributes are allowed to override (hide)
# controller generated model attributes of the same name.
# spring.freemarker.allow-request-override=false

# Set whether HttpSession attributes are allowed to override (hide) controller
# generated model attributes of the same name.
# spring.freemarker.allow-session-override=false

# Enable template caching.
# spring.freemarker.cache=false

# Template encoding.
# spring.freemarker.charset=UTF-8

# Check that the templates location exists.
# spring.freemarker.check-template-location=true

# Content-Type value.
# spring.freemarker.content-type=text/html

# Enable MVC view resolution for this technology.
# spring.freemarker.enabled=true

# Set whether all request attributes should be added to the model prior to
# merging with the template.
# spring.freemarker.expose-request-attributes=false

# Set whether all HttpSession attributes should be added to the model prior to
# merging with the template.
# spring.freemarker.expose-session-attributes=false

# Set whether to expose a RequestContext for use by Spring's macro library,
# under the name "springMacroRequestContext".
# spring.freemarker.expose-spring-macro-helpers=true

# Prefer file system access for template loading.
# File system access enables hot detection of template changes.
# spring.freemarker.prefer-file-system-access=true

# Prefix that gets prepended to view names when building a URL.
# spring.freemarker.prefix=

# Name of the RequestContext attribute for all views.
# spring.freemarker.request-context-attribute=

# Well-known FreeMarker keys which will be passed to FreeMarker's Configuration.
# spring.freemarker.settings.*=

# Suffix that gets appended to view names when building a URL.
# spring.freemarker.suffix=.ftl

# Comma-separated list of template paths.
# spring.freemarker.template-loader-path=classpath:/templates/

# White list of view names that can be resolved.
# spring.freemarker.view-names=


# -------------------------------------
# GROOVY TEMPLATES (GroovyTemplateAutoConfiguration)

# Set whether HttpServletRequest attributes are allowed to override (hide)
# controller generated model attributes of the same name.
# spring.groovy.template.allow-request-override=false

# Set whether HttpSession attributes are allowed to override (hide) controller
# generated model attributes of the same name.
# spring.groovy.template.allow-session-override=false

# Enable template caching.
# spring.groovy.template.cache=

# Template encoding.
# spring.groovy.template.charset=UTF-8

# Check that the templates location exists.
# spring.groovy.template.check-template-location=true

# See GroovyMarkupConfigurer
# spring.groovy.template.configuration.*=

# Content-Type value.
# spring.groovy.template.content-type=test/html

# Enable MVC view resolution for this technology.
# spring.groovy.template.enabled=true

# Set whether all request attributes should be added to the model prior to
# merging with the template.
# spring.groovy.template.expose-request-attributes=false

# Set whether all HttpSession attributes should be added to the model prior to
# merging with the template.
# spring.groovy.template.expose-session-attributes=false

# Set whether to expose a RequestContext for use by Spring's macro library,
# under the name "springMacroRequestContext".
# spring.groovy.template.expose-spring-macro-helpers=true

# Prefix that gets prepended to view names when building a URL.
# spring.groovy.template.prefix=

# Name of the RequestContext attribute for all views.
# spring.groovy.template.request-context-attribute=

# Template path.
# spring.groovy.template.resource-loader-path=classpath:/templates/

# Suffix that gets appended to view names when building a URL.
# spring.groovy.template.suffix=.tpl

# White list of view names that can be resolved.
# spring.groovy.template.view-names=


# -------------------------------------
# SPRING HATEOAS (HateoasProperties)

# Specify if application/hal+json responses should be sent to requests that
# accept application/json.
# spring.hateoas.use-hal-as-default-json-media-type=true


# -------------------------------------
# HTTP message conversion
 
# Preferred JSON mapper to use for HTTP message conversion.
# Set to "gson" to force the use of Gson when both it and Jackson are on the classpath.
# spring.http.converters.preferred-json-mapper=jackson


# -------------------------------------
# HTTP encoding (HttpEncodingProperties)

# Charset of HTTP requests and responses.
# Added to the "Content-Type" header if not set explicitly.
# spring.http.encoding.charset=UTF-8

# Enable http encoding support.
# spring.http.encoding.enabled=true

# Force the encoding to the configured charset on HTTP requests and responses.
# spring.http.encoding.force=

# Force the encoding to the configured charset on HTTP requests.
# Defaults to
# true when "force" has not been specified.
# spring.http.encoding.force-request=

# Force the encoding to the configured charset on HTTP responses.
# spring.http.encoding.force-response=

# Locale to Encoding mapping.
# spring.http.encoding.mapping=


# -------------------------------------
# MULTIPART (MultipartProperties)

# Enable support of multi-part uploads.
# spring.http.multipart.enabled=true

# Threshold after which files will be written to disk.
# Values can use the suffixed "MB" or "KB" to indicate a Megabyte or Kilobyte size.
# spring.http.multipart.file-size-threshold=0

# Intermediate location of uploaded files.
# spring.http.multipart.location=

# Max file size.
# Values can use the suffixed "MB" or "KB" to indicate
# a Megabyte or Kilobyte size.
# spring.http.multipart.max-file-size=1MB

# Max request size.
# Values can use the suffixed "MB" or "KB" to indicate
# a Megabyte or Kilobyte size.
# spring.http.multipart.max-request-size=10MB

# Whether to resolve the multipart request lazily at the time of file or
# parameter access.
# spring.http.multipart.resolve-lazily=false


# -------------------------------------
# JACKSON (JacksonProperties)

# Date format string or a fully-qualified date format class name.
# For instance `yyyy-MM-dd HH:mm:ss`.
# spring.jackson.date-format=

# Controls the inclusion of properties during serialization.
# spring.jackson.default-property-inclusion=

# Jackson on/off features that affect the way Java objects are deserialized.
# spring.jackson.deserialization.*=

# Jackson on/off features for generators.
# spring.jackson.generator.*=

# Joda date time format string.
# If not configured, "date-format" will be used as a fallback if it is
# configured with a format string.
# spring.jackson.joda-date-time-format=

# Locale used for formatting.
# spring.jackson.locale=

# Jackson general purpose on/off features.
# spring.jackson.mapper.*=

# Jackson on/off features for parsers.
# spring.jackson.parser.*=

# One of the constants on Jackson's PropertyNamingStrategy.
# Can also be a fully-qualified class name of a PropertyNamingStrategy subclass.
# spring.jackson.property-naming-strategy=

# Jackson on/off features that affect the way Java objects are serialized.
# spring.jackson.serialization.*=

# Time zone used when formatting dates.
# For instance `America/Los_Angeles`
# spring.jackson.time-zone=


# -------------------------------------
# JERSEY (JerseyProperties)

# Path that serves as the base URI for the application.
# Overrides the value of "@ApplicationPath" if specified.
# spring.jersey.application-path=

# Jersey filter chain order.
# spring.jersey.filter.order=0

# Init parameters to pass to Jersey via the servlet or filter.
# spring.jersey.init.*=

# Load on startup priority of the Jersey servlet.
# spring.jersey.servlet.load-on-startup=-1

# Jersey integration type.
# spring.jersey.type=servlet


# -------------------------------------
# SPRING LDAP (LdapProperties)

# LDAP URLs of the server.
# spring.ldap.urls=

# Base suffix from which all operations should originate.
# spring.ldap.base=

# Login user of the server.
# spring.ldap.username=

# Login password of the server.
# spring.ldap.password=

# LDAP specification settings.
# spring.ldap.base-environment.*=


# -------------------------------------
# EMBEDDED LDAP (EmbeddedLdapProperties)

# The base DN
# spring.ldap.embedded.base-dn=

# Embedded LDAP username.
# spring.ldap.embedded.credential.username=

# Embedded LDAP password.
# spring.ldap.embedded.credential.password=

# Schema (LDIF) script resource reference.
# spring.ldap.embedded.ldif=classpath:schema.ldif

# Embedded LDAP port.
# spring.ldap.embedded.port=

# Enable LDAP schema validation.
# spring.ldap.embedded.validation.enabled=true

# Path to the custom schema.
# spring.ldap.embedded.validation.schema=


# -------------------------------------
# SPRING MOBILE DEVICE VIEWS (DeviceDelegatingViewResolverAutoConfiguration)

# Enable support for fallback resolution.
# spring.mobile.devicedelegatingviewresolver.enable-fallback=false

# Enable device view resolver.
# spring.mobile.devicedelegatingviewresolver.enabled=false

# Prefix that gets prepended to view names for mobile devices.
# spring.mobile.devicedelegatingviewresolver.mobile-prefix=mobile/

# Suffix that gets appended to view names for mobile devices.
# spring.mobile.devicedelegatingviewresolver.mobile-suffix=

# Prefix that gets prepended to view names for normal devices.
# spring.mobile.devicedelegatingviewresolver.normal-prefix=

# Suffix that gets appended to view names for normal devices.
# spring.mobile.devicedelegatingviewresolver.normal-suffix=

# Prefix that gets prepended to view names for tablet devices.
# spring.mobile.devicedelegatingviewresolver.tablet-prefix=tablet/

# Suffix that gets appended to view names for tablet devices.
# spring.mobile.devicedelegatingviewresolver.tablet-suffix=


# -------------------------------------
# SPRING MOBILE SITE PREFERENCE (SitePreferenceAutoConfiguration)

# Enable SitePreferenceHandler.
# spring.mobile.sitepreference.enabled=true


# -------------------------------------
# MUSTACHE TEMPLATES (MustacheAutoConfiguration)

# Set whether HttpServletRequest attributes are allowed to override (hide)
# controller generated model attributes of the same name.
# spring.mustache.allow-request-override=

# Set whether HttpSession attributes are allowed to override (hide)
# controller generated model attributes of the same name.
# spring.mustache.allow-session-override=

# Enable template caching.
# spring.mustache.cache=

# Template encoding.
# spring.mustache.charset=

# Check that the templates location exists.
# spring.mustache.check-template-location=

# Content-Type value.
# spring.mustache.content-type=

# Enable MVC view resolution for this technology.
# spring.mustache.enabled=

# Set whether all request attributes should be added to the model prior to
# merging with the template.
# spring.mustache.expose-request-attributes=

# Set whether all HttpSession attributes should be added to the model prior to
# merging with the template.
# spring.mustache.expose-session-attributes=

# Set whether to expose a RequestContext for use by Spring's macro library,
# under the name "springMacroRequestContext".
# spring.mustache.expose-spring-macro-helpers=

# Prefix to apply to template names.
# spring.mustache.prefix=classpath:/templates/

# Name of the RequestContext attribute for all views.
# spring.mustache.request-context-attribute=

# Suffix to apply to template names.
# spring.mustache.suffix=.html

# White list of view names that can be resolved.
# spring.mustache.view-names=


# -------------------------------------
# SPRING MVC (WebMvcProperties)

# Amount of time (in milliseconds) before asynchronous request handling times out.
# spring.mvc.async.request-timeout=

# Date format to use.
# For instance `dd/MM/yyyy`.
# spring.mvc.date-format=

# Dispatch TRACE requests to the FrameworkServlet doService method.
# spring.mvc.dispatch-trace-request=false

# Dispatch OPTIONS requests to the FrameworkServlet doService method.
# spring.mvc.dispatch-options-request=true

# Enable resolution of favicon.ico.
# spring.mvc.favicon.enabled=true

# Enable Spring's HttpPutFormContentFilter.
# spring.mvc.formcontent.putfilter.enabled=true

# If the content of the "default" model should be ignored during redirect scenarios.
# spring.mvc.ignore-default-model-on-redirect=true

# Locale to use.
# By default, this locale is overridden by the "Accept-Language" header.
# spring.mvc.locale=

# Define how the locale should be resolved.
# spring.mvc.locale-resolver=accept-header

# Enable warn logging of exceptions resolved by a "HandlerExceptionResolver".
# spring.mvc.log-resolved-exception=false

# Maps file extensions to media types for content negotiation.
# spring.mvc.media-types.*=

# Formatting strategy for message codes.
# For instance `PREFIX_ERROR_CODE`.
# spring.mvc.message-codes-resolver-format=

# Load on startup priority of the Spring Web Services servlet.
# spring.mvc.servlet.load-on-startup=-1

# Path pattern used for static resources.
# spring.mvc.static-path-pattern=/**

# If a "NoHandlerFoundException" should be thrown if no Handler was found to process a request.
# spring.mvc.throw-exception-if-no-handler-found=false

# Spring MVC view prefix.
# spring.mvc.view.prefix=

# Spring MVC view suffix.
# spring.mvc.view.suffix=


# -------------------------------------
# SPRING RESOURCES HANDLING (ResourceProperties)

# Enable default resource handling.
# spring.resources.add-mappings=true

# Cache period for the resources served by the resource handler, in seconds.
# spring.resources.cache-period=

# Enable caching in the Resource chain.
# spring.resources.chain.cache=true

# Enable the Spring Resource Handling chain.
# Disabled by default unless at least one strategy has been enabled.
# spring.resources.chain.enabled=

# Enable resolution of already gzipped resources.
# spring.resources.chain.gzipped=false

# Enable HTML5 application cache manifest rewriting.
# spring.resources.chain.html-application-cache=false

# Enable the content Version Strategy.
# spring.resources.chain.strategy.content.enabled=false

# Comma-separated list of patterns to apply to the Version Strategy.
# spring.resources.chain.strategy.content.paths=/**

# Enable the fixed Version Strategy.
# spring.resources.chain.strategy.fixed.enabled=false

# Comma-separated list of patterns to apply to the Version Strategy.
# spring.resources.chain.strategy.fixed.paths=/**

# Version string to use for the Version Strategy.
# spring.resources.chain.strategy.fixed.version=

# Locations of static resources.
# spring.resources.static-locations=classpath:/META-INF/resources/,classpath:/resources/,classpath:/static/,classpath:/public/


# -------------------------------------
# SPRING SESSION (SessionProperties)

# Sessions flush mode.
# spring.session.hazelcast.flush-mode=on-save

# Name of the map used to store sessions.
# spring.session.hazelcast.map-name=spring:session:sessions

# Create the required session tables on startup if necessary.
# Enabled automatically if the default table name is set or a custom schema is configured.
# spring.session.jdbc.initializer.enabled=

# Path to the SQL file to use to initialize the database schema.
# spring.session.jdbc.schema=classpath:org/springframework/session/jdbc/schema-@@platform@@.sql

# Name of database table used to store sessions.
# spring.session.jdbc.table-name=SPRING_SESSION

# Collection name used to store sessions.
# spring.session.mongo.collection-name=sessions

# Sessions flush mode.
# spring.session.redis.flush-mode=on-save

# Namespace for keys used to store sessions.
# spring.session.redis.namespace=

# Session store type.
# spring.session.store-type=


# -------------------------------------
# SPRING SOCIAL (SocialWebAutoConfiguration)

# Enable the connection status view for supported providers.
# spring.social.auto-connection-views=false


# -------------------------------------
# SPRING SOCIAL FACEBOOK (FacebookAutoConfiguration)

# your application's Facebook App ID
# spring.social.facebook.app-id=

# your application's Facebook App Secret
# spring.social.facebook.app-secret=


# -------------------------------------
# SPRING SOCIAL LINKEDIN (LinkedInAutoConfiguration)

# your application's LinkedIn App ID
# spring.social.linkedin.app-id=

# your application's LinkedIn App Secret
# spring.social.linkedin.app-secret=


# -------------------------------------
# SPRING SOCIAL TWITTER (TwitterAutoConfiguration)

# your application's Twitter App ID
# spring.social.twitter.app-id=

# your application's Twitter App Secret
# spring.social.twitter.app-secret=


# -------------------------------------
# THYMELEAF (ThymeleafAutoConfiguration)

# Enable template caching.
# spring.thymeleaf.cache=true

# Check that the template exists before rendering it.
# spring.thymeleaf.check-template=true

# Check that the templates location exists.
# spring.thymeleaf.check-template-location=true

# Content-Type value.
# spring.thymeleaf.content-type=text/html

# Enable MVC Thymeleaf view resolution.
# spring.thymeleaf.enabled=true

# Template encoding.
# spring.thymeleaf.encoding=UTF-8

# Comma-separated list of view names that should be excluded from resolution.
# spring.thymeleaf.excluded-view-names=

# Template mode to be applied to templates.
# See also StandardTemplateModeHandlers.
# spring.thymeleaf.mode=HTML5

# Prefix that gets prepended to view names when building a URL.
# spring.thymeleaf.prefix=classpath:/templates/

# Suffix that gets appended to view names when building a URL.
# spring.thymeleaf.suffix=.html

# Order of the template resolver in the chain.
# spring.thymeleaf.template-resolver-order=

# Comma-separated list of view names that can be resolved.
# spring.thymeleaf.view-names=


# -------------------------------------
# SPRING WEB SERVICES (WebServicesProperties)

# Path that serves as the base URI for the services.
# spring.webservices.path=/services

# Servlet init parameters to pass to Spring Web Services.
# spring.webservices.servlet.init=

# Load on startup priority of the Spring Web Services servlet.
# spring.webservices.servlet.load-on-startup=-1



# -----------------------------------------------------------------------------
# SECURITY PROPERTIES
# -----------------------------------------------------------------------------

# -------------------------------------
# SECURITY (SecurityProperties)

# Security authorize mode to apply.
# security.basic.authorize-mode=role

# Enable basic authentication.
# security.basic.enabled=true

# Comma-separated list of paths to secure.
# security.basic.path=/**

# HTTP basic realm name.
# security.basic.realm=Spring

# Enable Cross Site Request Forgery support.
# security.enable-csrf=false

# Security filter chain order.
# security.filter-order=0

# Security filter chain dispatcher types.
# security.filter-dispatcher-types=ASYNC, FORWARD, INCLUDE, REQUEST

# Enable cache control HTTP headers.
# security.headers.cache=true

# Value for content security policy header.
# security.headers.content-security-policy=

# Content security policy mode.
# security.headers.content-security-policy-mode=default

# Enable "X-Content-Type-Options" header.
# security.headers.content-type=true

# Enable "X-Frame-Options" header.
# security.headers.frame=true

# HTTP Strict Transport Security (HSTS) mode (none, domain, all).
# security.headers.hsts=all

# Enable cross site scripting (XSS) protection.
# security.headers.xss=true

# Comma-separated list of paths to exclude from the default secured paths.
# security.ignored=

# Enable secure channel for all requests.
# security.require-ssl=false

# Session creation policy (always, never, if_required, stateless).
# security.sessions=stateless

# Default user name.
security.user.name=user

# Password for the default user name.
# A random password is logged on startup by default.
security.user.password=password

# Granted roles for the default user name.
# security.user.role=USER


# -------------------------------------
# SECURITY OAUTH2 CLIENT (OAuth2ClientProperties)

# OAuth2 client id.
# security.oauth2.client.client-id=

# OAuth2 client secret.
# A random secret is generated by default
# security.oauth2.client.client-secret=


# -------------------------------------
# SECURITY OAUTH2 RESOURCES (ResourceServerProperties)

# The order of the filter chain used to authenticate tokens.
# security.oauth2.resource.filter-order=

# Identifier of the resource.
# security.oauth2.resource.id=

# The URI of the JWT token.
# Can be set if the value is not available and the key is public.
# security.oauth2.resource.jwt.key-uri=

# The verification key of the JWT token.
# Can either be a symmetric secret or PEM-encoded RSA public key.
# security.oauth2.resource.jwt.key-value=

# The URI for getting the set of keys that can be used to validate the token.
# security.oauth2.resource.jwk.key-set-uri=

# Use the token info, can be set to false to use the user info.
# security.oauth2.resource.prefer-token-info=true

#
# security.oauth2.resource.service-id=resource

# URI of the token decoding endpoint.
# security.oauth2.resource.token-info-uri=

# The token type to send when using the userInfoUri.
# security.oauth2.resource.token-type=

# URI of the user endpoint.
# security.oauth2.resource.user-info-uri=


# -------------------------------------
# SECURITY OAUTH2 SSO (OAuth2SsoProperties)

# Filter order to apply if not providing an explicit WebSecurityConfigurerAdapter
# security.oauth2.sso.filter-order=

# Path to the login page, i.e. the one that triggers the redirect to
# the OAuth2 Authorization Server
# security.oauth2.sso.login-path=/login


# -----------------------------------------------------------------------------
# DATA PROPERTIES
# -----------------------------------------------------------------------------


# -------------------------------------
# FLYWAY (FlywayProperties)

#
# flyway.baseline-description=

# version to start migration
# flyway.baseline-version=1

#
# flyway.baseline-on-migrate=

# Check that migration scripts location exists.
# flyway.check-location=false

#
# flyway.clean-on-validation-error=

# Enable flyway.
# flyway.enabled=true

#
# flyway.encoding=

#
# flyway.ignore-failed-future-migration=

# SQL statements to execute to initialize a connection immediately after obtaining it.
# flyway.init-sqls=

# locations of migrations scripts
# flyway.locations=classpath:db/migration

#
# flyway.out-of-order=

# JDBC password if you want Flyway to create its own DataSource
# flyway.password=

#
# flyway.placeholder-prefix=

#
# flyway.placeholder-replacement=

#
# flyway.placeholder-suffix=

#
# flyway.placeholders.*=

# schemas to update
# flyway.schemas=

#
# flyway.sql-migration-prefix=V

#
# flyway.sql-migration-separator=

#
# flyway.sql-migration-suffix=.sql

#
# flyway.table=

# JDBC url of the database to migrate.
# If not set, the primary configured data source is used.
# flyway.url=

# Login user of the database to migrate.
# flyway.user=

#
# flyway.validate-on-migrate=


# -------------------------------------
# LIQUIBASE (LiquibaseProperties)

# Change log configuration path.
# liquibase.change-log=classpath:/db/changelog/db.changelog-master.yaml

# Check the change log location exists.
# liquibase.check-change-log-location=true

# Comma-separated list of runtime contexts to use.
# liquibase.contexts=

# Default database schema.
# liquibase.default-schema=

# Drop the database schema first.
# liquibase.drop-first=false

# Enable liquibase support.
# liquibase.enabled=true

# Comma-separated list of runtime labels to use.
# liquibase.labels=

# Change log parameters.
# liquibase.parameters.*=

# Login password of the database to migrate.
# liquibase.password=

# File to which rollback SQL will be written when an update is performed.
# liquibase.rollback-file=

# JDBC url of the database to migrate.
# If not set, the primary configured data source is used.
# liquibase.url=

# Login user of the database to migrate.
# liquibase.user=


# -------------------------------------
# COUCHBASE (CouchbaseProperties)

# Couchbase nodes (host or IP address) to bootstrap from.
# spring.couchbase.bootstrap-hosts=

# Name of the bucket to connect to.
# spring.couchbase.bucket.name=default

# Password of the bucket.
# spring.couchbase.bucket.password= 

# Number of sockets per node against the Key/value service.
# spring.couchbase.env.endpoints.key-value=1

# Number of sockets per node against the Query (N1QL) service.
# spring.couchbase.env.endpoints.query=1

# Number of sockets per node against the view service.
# spring.couchbase.env.endpoints.view=1

# Enable SSL support.
# Enabled automatically if a "keyStore" is provided unless specified otherwise.
# spring.couchbase.env.ssl.enabled=

# Path to the JVM key store that holds the certificates.
# spring.couchbase.env.ssl.key-store=

# Password used to access the key store.
# spring.couchbase.env.ssl.key-store-password=

# Bucket connections timeout in milliseconds.
# spring.couchbase.env.timeouts.connect=5000

# Blocking operations performed on a specific key timeout in milliseconds.
# spring.couchbase.env.timeouts.key-value=2500

# N1QL query operations timeout in milliseconds.
# spring.couchbase.env.timeouts.query=7500

# Socket connect connections timeout in milliseconds.
# spring.couchbase.env.timeouts.socket-connect=1000

# Regular and geospatial view operations timeout in milliseconds.
# spring.couchbase.env.timeouts.view=7500


# -------------------------------------
# DAO (PersistenceExceptionTranslationAutoConfiguration)

# Enable the PersistenceExceptionTranslationPostProcessor.
# spring.dao.exceptiontranslation.enabled=true


# -------------------------------------
# CASSANDRA (CassandraProperties)

# Name of the Cassandra cluster.
# spring.data.cassandra.cluster-name=

# Compression supported by the Cassandra binary protocol.
# spring.data.cassandra.compression=none

# Socket option: connection time out.
# spring.data.cassandra.connect-timeout-millis=

# Queries consistency level.
# spring.data.cassandra.consistency-level=

# Comma-separated list of cluster node addresses.
# spring.data.cassandra.contact-points=localhost

# Queries default fetch size.
# spring.data.cassandra.fetch-size=

# Keyspace name to use.
# spring.data.cassandra.keyspace-name=

# Class name of the load balancing policy.
# spring.data.cassandra.load-balancing-policy=

# Port of the Cassandra server.
# spring.data.cassandra.port=

# Login password of the server.
# spring.data.cassandra.password=

# Socket option: read time out.
# spring.data.cassandra.read-timeout-millis=

# Reconnection policy class.
# spring.data.cassandra.reconnection-policy=

# Enable Cassandra repositories.
# spring.data.cassandra.repositories.enabled=

# Class name of the retry policy.
# spring.data.cassandra.retry-policy=

# Queries serial consistency level.
# spring.data.cassandra.serial-consistency-level=

# Schema action to take at startup.
# spring.data.cassandra.schema-action=none

# Enable SSL support.
# spring.data.cassandra.ssl=false

# Login user of the server.
# spring.data.cassandra.username=


# -------------------------------------
# DATA COUCHBASE (CouchbaseDataProperties)

# Automatically create views and indexes.
# spring.data.couchbase.auto-index=false

# Consistency to apply by default on generated queries.
# spring.data.couchbase.consistency=read-your-own-writes

# Enable Couchbase repositories.
# spring.data.couchbase.repositories.enabled=true


# -------------------------------------
# ELASTICSEARCH (ElasticsearchProperties)

# Elasticsearch cluster name.
# spring.data.elasticsearch.cluster-name=elasticsearch

# Comma-separated list of cluster node addresses.
# If not specified, starts a client node.
# spring.data.elasticsearch.cluster-nodes=

# Additional properties used to configure the client.
# spring.data.elasticsearch.properties.*=

# Enable Elasticsearch repositories.
# spring.data.elasticsearch.repositories.enabled=true


# -------------------------------------
# DATA LDAP

# Enable LDAP repositories.
# spring.data.ldap.repositories.enabled=true


# -------------------------------------
# MONGODB (MongoProperties)

# Authentication database name.
# spring.data.mongodb.authentication-database=

# Database name.
# spring.data.mongodb.database=test

# Fully qualified name of the FieldNamingStrategy to use.
# spring.data.mongodb.field-naming-strategy=

# GridFS database name.
# spring.data.mongodb.grid-fs-database=

# Mongo server host.
# Cannot be set with uri.
# spring.data.mongodb.host=localhost

# Login password of the mongo server.
# Cannot be set with uri.
# spring.data.mongodb.password=

# Mongo server port.
# Cannot be set with uri.
# spring.data.mongodb.port=27017

# Enable Mongo repositories.
# spring.data.mongodb.repositories.enabled=true

# Mongo database URI.
# Cannot be set with host, port and credentials.
# spring.data.mongodb.uri=mongodb://localhost/test

# Login user of the mongo server.
# Cannot be set with uri.
# spring.data.mongodb.username=


# -------------------------------------
# DATA REDIS

# Enable Redis repositories.
# spring.data.redis.repositories.enabled=true


# -------------------------------------
# NEO4J (Neo4jProperties)

# Compiler to use.
# spring.data.neo4j.compiler=

# Enable embedded mode if the embedded driver is available.
# spring.data.neo4j.embedded.enabled=true

# Register OpenSessionInViewInterceptor.
# Binds a Neo4j Session to the thread for the entire processing of the request.
# spring.data.neo4j.open-in-view=true

# Login password of the server.
# spring.data.neo4j.password=

# Enable Neo4j repositories.
# spring.data.neo4j.repositories.enabled=true

# URI used by the driver.
# Auto-detected by default.
# spring.data.neo4j.uri=

# Login user of the server.
# spring.data.neo4j.username=


# -------------------------------------
# DATA REST (RepositoryRestProperties)

# Base path to be used by Spring Data REST to expose repository resources.
# spring.data.rest.base-path=

# Content type to use as a default when none is specified.
# spring.data.rest.default-media-type=

# Default size of pages.
# spring.data.rest.default-page-size=

# Strategy to use to determine which repositories get exposed.
# spring.data.rest.detection-strategy=default

# Enable enum value translation via the Spring Data REST default resource bundle.
# spring.data.rest.enable-enum-translation=

# Name of the URL query string parameter that indicates how many results
# to return at once.
# spring.data.rest.limit-param-name=

# Maximum size of pages.
# spring.data.rest.max-page-size=

# Name of the URL query string parameter that indicates what page to return.
# spring.data.rest.page-param-name=

# Return a response body after creating an entity.
# spring.data.rest.return-body-on-create=

# Return a response body after updating an entity.
# spring.data.rest.return-body-on-update=

# Name of the URL query string parameter that indicates what direction
# to sort results.
# spring.data.rest.sort-param-name=


# -------------------------------------
# SOLR (SolrProperties)

# Solr host.
# Ignored if "zk-host" is set.
# spring.data.solr.host=http://127.0.0.1:8983/solr

# Enable Solr repositories.
# spring.data.solr.repositories.enabled=true

# ZooKeeper host address in the form HOST:PORT.
# spring.data.solr.zk-host=


# -------------------------------------
# DATASOURCE (DataSourceAutoConfiguration & DataSourceProperties)

# Do not stop if an error occurs while initializing the database.
# spring.datasource.continue-on-error=false

# Data (DML) script resource references.
# spring.datasource.data=

# User of the database to execute DML scripts (if different).
spring.datasource.data-username=root

# Password of the database to execute DML scripts (if different).
spring.datasource.data-password=

# Commons DBCP2 specific settings
# spring.datasource.dbcp2.*=

# Fully qualified name of the JDBC driver.
# Auto-detected based on the URL by default.
# spring.datasource.driver-class-name=

# Generate a random datasource name.
# spring.datasource.generate-unique-name=false

# Hikari specific settings
# spring.datasource.hikari.*=

# Populate the database using 'data.sql'.
# spring.datasource.initialize=true

# Enable JMX support (if provided by the underlying pool).
# spring.datasource.jmx-enabled=false

# JNDI location of the datasource.
# Class, url, username & password are ignored when set.
# spring.datasource.jndi-name=

# Name of the datasource.
spring.datasource.name=$PROJECT_NAME

# Login password of the database.
spring.datasource.password=

# Platform to use in the DDL or DML scripts (e.g. schema-{platform}.sql
# or data-{platform}.sql).
# spring.datasource.platform=all

# Schema (DDL) script resource references.
# spring.datasource.schema=

# User of the database to execute DDL scripts (if different).
# spring.datasource.schema-username=

# Password of the database to execute DDL scripts (if different).
# spring.datasource.schema-password=

# Statement separator in SQL initialization scripts.
# spring.datasource.separator=;

# SQL scripts encoding.
# spring.datasource.sql-script-encoding=

# Tomcat datasource specific settings
# spring.datasource.tomcat.*=

# Fully qualified name of the connection pool implementation to use.
# By default, it is auto-detected from the classpath.
# spring.datasource.type=

# JDBC url of the database.
spring.datasource.url=jdbc:mysql://localhost:3306/$PROJECT_NAME

# Login user of the database.
spring.datasource.username=root

# XA datasource fully qualified name.
# spring.datasource.xa.data-source-class-name=

# Properties to pass to the XA data source.
# spring.datasource.xa.properties=


# -------------------------------------
# JEST (Elasticsearch HTTP client) (JestProperties)

# Connection timeout in milliseconds.
# spring.elasticsearch.jest.connection-timeout=3000

# Enable connection requests from multiple execution threads.
# spring.elasticsearch.jest.multi-threaded=true

# Login password.
# spring.elasticsearch.jest.password=

# Proxy host the HTTP client should use.
# spring.elasticsearch.jest.proxy.host=

# Proxy port the HTTP client should use.
# spring.elasticsearch.jest.proxy.port=

# Read timeout in milliseconds.
# spring.elasticsearch.jest.read-timeout=3000

# Comma-separated list of the Elasticsearch instances to use.
# spring.elasticsearch.jest.uris=http://localhost:9200

# Login user.
# spring.elasticsearch.jest.username=


# -------------------------------------
# H2 Web Console (H2ConsoleProperties)

# Enable the console.
# spring.h2.console.enabled=false

# Path at which the console will be available.
# spring.h2.console.path=/h2-console

# Enable trace output.
# spring.h2.console.settings.trace=false

# Enable remote access.
# spring.h2.console.settings.web-allow-others=false


# -------------------------------------
# JOOQ (JooqProperties)

# SQLDialect JOOQ used when communicating with the configured datasource.
# For instance `POSTGRES`
# spring.jooq.sql-dialect=


# -------------------------------------
# JPA (JpaBaseConfiguration, HibernateJpaAutoConfiguration)

# Enable JPA repositories.
# spring.data.jpa.repositories.enabled=true

# Target database to operate on, auto-detected by default.
# Can be alternatively set using the "databasePlatform" property.
# spring.jpa.database=

# Name of the target database to operate on, auto-detected by default.
# Can be alternatively set using the "Database" enum.
# spring.jpa.database-platform=

# Initialize the schema on startup.
# spring.jpa.generate-ddl=false

# DDL mode.
# This is actually a shortcut for the "hibernate.hbm2ddl.auto" property.
# Default to "create-drop" when using an embedded database, "none" otherwise.
# spring.jpa.hibernate.ddl-auto=

# Hibernate 5 implicit naming strategy fully qualified name.
# spring.jpa.hibernate.naming.implicit-strategy=

# Hibernate 5 physical naming strategy fully qualified name.
# spring.jpa.hibernate.naming.physical-strategy=

# Hibernate 4 naming strategy fully qualified name.
# Not supported with Hibernate 5.
# spring.jpa.hibernate.naming.strategy=

# Use Hibernate's newer IdentifierGenerator for AUTO, TABLE and SEQUENCE.
# spring.jpa.hibernate.use-new-id-generator-mappings=

# Register OpenEntityManagerInViewInterceptor.
# Binds a JPA EntityManager to the thread for the entire processing of the request.
# spring.jpa.open-in-view=true

# Additional native properties to set on the JPA provider.
# spring.jpa.properties.*=

# Enable logging of SQL statements.
# spring.jpa.show-sql=false


# -------------------------------------
# JTA (JtaAutoConfiguration)

# Enable JTA support.
# spring.jta.enabled=true

# Transaction logs directory.
# spring.jta.log-dir=

# Transaction manager unique identifier.
# spring.jta.transaction-manager-id=


# -------------------------------------
# ATOMIKOS (AtomikosProperties)

# Timeout, in seconds, for borrowing connections from the pool.
# spring.jta.atomikos.connectionfactory.borrow-connection-timeout=30

# Whether or not to ignore the transacted flag when creating session.
# spring.jta.atomikos.connectionfactory.ignore-session-transacted-flag=true

# Whether or not local transactions are desired.
# spring.jta.atomikos.connectionfactory.local-transaction-mode=false

# The time, in seconds, between runs of the pool's maintenance thread.
# spring.jta.atomikos.connectionfactory.maintenance-interval=60

# The time, in seconds, after which connections are cleaned up from the pool.
# spring.jta.atomikos.connectionfactory.max-idle-time=60

# The time, in seconds, that a connection can be pooled for before being destroyed.
# 0 denotes no limit.
# spring.jta.atomikos.connectionfactory.max-lifetime=0

# The maximum size of the pool.
# spring.jta.atomikos.connectionfactory.max-pool-size=1

# The minimum size of the pool.
# spring.jta.atomikos.connectionfactory.min-pool-size=1

# The reap timeout, in seconds, for borrowed connections.
# 0 denotes no limit.
# spring.jta.atomikos.connectionfactory.reap-timeout=0

# The unique name used to identify the resource during recovery.
# spring.jta.atomikos.connectionfactory.unique-resource-name=jmsConnectionFactory

# Timeout, in seconds, for borrowing connections from the pool.
# spring.jta.atomikos.datasource.borrow-connection-timeout=30

# Default isolation level of connections provided by the pool.
# spring.jta.atomikos.datasource.default-isolation-level=

# Timeout, in seconds, for establishing a database connection.
# spring.jta.atomikos.datasource.login-timeout=

# The time, in seconds, between runs of the pool's maintenance thread.
# spring.jta.atomikos.datasource.maintenance-interval=60

# The time, in seconds, after which connections are cleaned up from the pool.
# spring.jta.atomikos.datasource.max-idle-time=60

# The time, in seconds, that a connection can be pooled for before being destroyed.
# 0 denotes no limit.
# spring.jta.atomikos.datasource.max-lifetime=0

# The maximum size of the pool.
# spring.jta.atomikos.datasource.max-pool-size=1

# The minimum size of the pool.
# spring.jta.atomikos.datasource.min-pool-size=1

# The reap timeout, in seconds, for borrowed connections.
# 0 denotes no limit.
# spring.jta.atomikos.datasource.reap-timeout=0

# SQL query or statement used to validate a connection before returning it.
# spring.jta.atomikos.datasource.test-query=

# The unique name used to identify the resource during recovery.
# spring.jta.atomikos.datasource.unique-resource-name=dataSource

# Interval between checkpoints.
# spring.jta.atomikos.properties.checkpoint-interval=500

# Default timeout for JTA transactions.
# spring.jta.atomikos.properties.default-jta-timeout=10000

# Enable disk logging.
# spring.jta.atomikos.properties.enable-logging=true

# Specify if a VM shutdown should trigger forced shutdown of the transaction core.
# spring.jta.atomikos.properties.force-shutdown-on-vm-exit=false

# Directory in which the log files should be stored.
# spring.jta.atomikos.properties.log-base-dir=

# Transactions log file base name.
# spring.jta.atomikos.properties.log-base-name=tmlog

# Maximum number of active transactions.
# spring.jta.atomikos.properties.max-actives=50

# Maximum timeout (in milliseconds) that can be allowed for transactions.
# spring.jta.atomikos.properties.max-timeout=300000

# Specify if sub-transactions should be joined when possible.
# spring.jta.atomikos.properties.serial-jta-transactions=true

# Transaction manager implementation that should be started.
# spring.jta.atomikos.properties.service=

# Use different (and concurrent) threads for two-phase commit on the participating resources.
# spring.jta.atomikos.properties.threaded-two-phase-commit=false

# Transaction manager's unique name.
# spring.jta.atomikos.properties.transaction-manager-unique-name=


# -------------------------------------
# BITRONIX

# Number of connections to create when growing the pool.
# spring.jta.bitronix.connectionfactory.acquire-increment=1

# Time, in seconds, to wait before trying to acquire a connection again
# after an invalid connection was acquired.
# spring.jta.bitronix.connectionfactory.acquisition-interval=1

# Timeout, in seconds, for acquiring connections from the pool.
# spring.jta.bitronix.connectionfactory.acquisition-timeout=30

# Whether or not the transaction manager should allow mixing XA and non-XA transactions.
# spring.jta.bitronix.connectionfactory.allow-local-transactions=true

# Whether or not the transaction timeout should be set on the XAResource when it is enlisted.
# spring.jta.bitronix.connectionfactory.apply-transaction-timeout=false

# Whether or not resources should be enlisted and delisted automatically.
# spring.jta.bitronix.connectionfactory.automatic-enlisting-enabled=true

# Whether or not produces and consumers should be cached.
# spring.jta.bitronix.connectionfactory.cache-producers-consumers=true

# Whether or not the provider can run many transactions on the same connection
# and supports transaction interleaving.
# spring.jta.bitronix.connectionfactory.defer-connection-release=true

# Whether or not recovery failures should be ignored.
# spring.jta.bitronix.connectionfactory.ignore-recovery-failures=false

# The time, in seconds, after which connections are cleaned up from the pool.
# spring.jta.bitronix.connectionfactory.max-idle-time=60

# The maximum size of the pool.
# 0 denotes no limit.
# spring.jta.bitronix.connectionfactory.max-pool-size=10

# The minimum size of the pool.
# spring.jta.bitronix.connectionfactory.min-pool-size=0

# The password to use to connect to the JMS provider.
# spring.jta.bitronix.connectionfactory.password=

#  Whether or not connections in the ACCESSIBLE state can be shared within
# the context of a transaction.
# spring.jta.bitronix.connectionfactory.share-transaction-connections=false

# Whether or not connections should be tested when acquired from the pool.
# spring.jta.bitronix.connectionfactory.test-connections=true

# The position that this resource should take during two-phase commit
# (always first is Integer.MIN_VALUE, always last is Integer.MAX_VALUE).
# spring.jta.bitronix.connectionfactory.two-pc-ordering-position=1

# The unique name used to identify the resource during recovery.
# spring.jta.bitronix.connectionfactory.unique-name=jmsConnectionFactory

# Whether or not TMJOIN should be used when starting XAResources.
# spring.jta.bitronix.connectionfactory.use-tm-join=true 

# The user to use to connect to the JMS provider.
# spring.jta.bitronix.connectionfactory.user=

# Number of connections to create when growing the pool.
# spring.jta.bitronix.datasource.acquire-increment=1

# Time, in seconds, to wait before trying to acquire a connection again after
# an invalid connection was acquired.
# spring.jta.bitronix.datasource.acquisition-interval=1

# Timeout, in seconds, for acquiring connections from the pool.
# spring.jta.bitronix.datasource.acquisition-timeout=30

# Whether or not the transaction manager should allow mixing XA and non-XA transactions.
# spring.jta.bitronix.datasource.allow-local-transactions=true

# Whether or not the transaction timeout should be set on the XAResource when it is enlisted.
# spring.jta.bitronix.datasource.apply-transaction-timeout=false

# Whether or not resources should be enlisted and delisted automatically.
# spring.jta.bitronix.datasource.automatic-enlisting-enabled=true

# The default cursor holdability for connections.
# spring.jta.bitronix.datasource.cursor-holdability=

# Whether or not the database can run many transactions on the same connection
# and supports transaction interleaving.
# spring.jta.bitronix.datasource.defer-connection-release=true

# Whether or not Connection.isValid() is called when acquiring a connection from the pool.
# spring.jta.bitronix.datasource.enable-jdbc4-connection-test=

# Whether or not recovery failures should be ignored.
# spring.jta.bitronix.datasource.ignore-recovery-failures=false

# The default isolation level for connections.
# spring.jta.bitronix.datasource.isolation-level=

# The default auto-commit mode for local transactions.
# spring.jta.bitronix.datasource.local-auto-commit=

# Timeout, in seconds, for establishing a database connection.
# spring.jta.bitronix.datasource.login-timeout=

# The time, in seconds, after which connections are cleaned up from the pool.
# spring.jta.bitronix.datasource.max-idle-time=60

# The maximum size of the pool.
# 0 denotes no limit.
# spring.jta.bitronix.datasource.max-pool-size=10

# The minimum size of the pool.
# spring.jta.bitronix.datasource.min-pool-size=0

# The target size of the prepared statement cache.
# 0 disables the cache.
# spring.jta.bitronix.datasource.prepared-statement-cache-size=0

#  Whether or not connections in the ACCESSIBLE state can be shared within
# the context of a transaction.
# spring.jta.bitronix.datasource.share-transaction-connections=false

# SQL query or statement used to validate a connection before returning it.
# spring.jta.bitronix.datasource.test-query=

# The position that this resource should take during two-phase commit
# (always first is Integer.MIN_VALUE, always last is Integer.MAX_VALUE).
# spring.jta.bitronix.datasource.two-pc-ordering-position=1

# The unique name used to identify the resource during recovery.
# spring.jta.bitronix.datasource.unique-name=dataSource

# Whether or not TMJOIN should be used when starting XAResources.
# spring.jta.bitronix.datasource.use-tm-join=true

# Allow multiple LRC resources to be enlisted into the same transaction.
# spring.jta.bitronix.properties.allow-multiple-lrc=false

# Enable asynchronously execution of two phase commit.
# spring.jta.bitronix.properties.asynchronous2-pc=false

# Interval in seconds at which to run the recovery process in the background.
# spring.jta.bitronix.properties.background-recovery-interval-seconds=60

# Recover only the current node.
# spring.jta.bitronix.properties.current-node-only-recovery=true

# Log the creation and commit call stacks of transactions executed without
# a single enlisted resource.
# spring.jta.bitronix.properties.debug-zero-resource-transaction=false

# Default transaction timeout in seconds.
# spring.jta.bitronix.properties.default-transaction-timeout=60

# Enable JMX support.
# spring.jta.bitronix.properties.disable-jmx=false

# Set the fully qualified name of the exception analyzer implementation to use.
# spring.jta.bitronix.properties.exception-analyzer=

# Enable filtering of logs so that only mandatory logs are written.
# spring.jta.bitronix.properties.filter-log-status=false

#  Set if disk forces are batched.
# spring.jta.bitronix.properties.force-batching-enabled=true

# Set if logs are forced to disk.
# spring.jta.bitronix.properties.forced-write-enabled=true

# Maximum amount of seconds the TM will wait for transactions to get done
# before aborting them at shutdown time.
# spring.jta.bitronix.properties.graceful-shutdown-interval=60

# JNDI name of the TransactionSynchronizationRegistry.
# spring.jta.bitronix.properties.jndi-transaction-synchronization-registry-name=

# JNDI name of the UserTransaction.
# spring.jta.bitronix.properties.jndi-user-transaction-name=

# Name of the journal.
# Can be 'disk', 'null' or a class name.
# spring.jta.bitronix.properties.journal=disk

# Name of the first fragment of the journal.
# spring.jta.bitronix.properties.log-part1-filename=btm1.tlog

# Name of the second fragment of the journal.
# spring.jta.bitronix.properties.log-part2-filename=btm2.tlog

# Maximum size in megabytes of the journal fragments.
# spring.jta.bitronix.properties.max-log-size-in-mb=2

# ResourceLoader configuration file name.
# spring.jta.bitronix.properties.resource-configuration-filename=

# ASCII ID that must uniquely identify this TM instance.
# Default to the machine's IP address.
# spring.jta.bitronix.properties.server-id=

# Skip corrupted transactions log entries.
# spring.jta.bitronix.properties.skip-corrupted-logs=false

# Log a warning for transactions executed without a single enlisted resource.
# spring.jta.bitronix.properties.warn-about-zero-resource-transaction=true


# -------------------------------------
# NARAYANA (NarayanaProperties)

# Transaction timeout in seconds.
# spring.jta.narayana.default-timeout=60

# Comma-separated list of expiry scanners.
# spring.jta.narayana.expiry-scanners=com.arjuna.ats.internal.arjuna.recovery.ExpiredTransactionStatusManagerScanner

# Transaction object store directory.
# spring.jta.narayana.log-dir=

# Enable one phase commit optimisation.
# spring.jta.narayana.one-phase-commit=true

# Interval in which periodic recovery scans are performed in seconds.
# spring.jta.narayana.periodic-recovery-period=120

# Back off period between first and second phases of the recovery scan in seconds.
# spring.jta.narayana.recovery-backoff-period=10

# Database password to be used by recovery manager.
# spring.jta.narayana.recovery-db-pass=

# Database username to be used by recovery manager.
# spring.jta.narayana.recovery-db-user=

# JMS password to be used by recovery manager.
# spring.jta.narayana.recovery-jms-pass=

# JMS username to be used by recovery manager.
# spring.jta.narayana.recovery-jms-user=

# Comma-separated list of recovery modules.
# spring.jta.narayana.recovery-modules=

# Unique transaction manager id.
# spring.jta.narayana.transaction-manager-id=1

# Comma-separated list of orphan filters.
# spring.jta.narayana.xa-resource-orphan-filters=


# -------------------------------------
# EMBEDDED MONGODB (EmbeddedMongoProperties)

# Comma-separated list of features to enable.
# spring.mongodb.embedded.features=SYNC_DELAY

# Directory used for data storage.
# spring.mongodb.embedded.storage.database-dir=

# Maximum size of the oplog in megabytes.
# spring.mongodb.embedded.storage.oplog-size=

# Name of the replica set.
# spring.mongodb.embedded.storage.repl-set-name=

# Version of Mongo to use.
# spring.mongodb.embedded.version=2.6.10


# -------------------------------------
# REDIS (RedisProperties)

# Maximum number of redirects to follow when executing commands across the cluster.
# spring.redis.cluster.max-redirects=

# Comma-separated list of "host:port" pairs to bootstrap from.
# spring.redis.cluster.nodes=

# Database index used by the connection factory.
# spring.redis.database=0

# Connection URL, will override host, port and password (user will be ignored),
# e.g. redis://user:password@example.com:6379
# spring.redis.url=

# Redis server host.
# spring.redis.host=localhost

# Login password of the redis server.
# spring.redis.password=

# Enable SSL support.
# spring.redis.ssl=false

# Max number of connections that can be allocated by the pool at a given time.
# Use a negative value for no limit.
# spring.redis.pool.max-active=8

# Max number of "idle" connections in the pool.
# Use a negative value to indicate an unlimited number of idle connections.
# spring.redis.pool.max-idle=8

# Maximum amount of time (in milliseconds) a connection allocation should block
# before throwing an exception when the pool is exhausted.
# Use a negative value to block indefinitely.
# spring.redis.pool.max-wait=-1

# Target for the minimum number of idle connections to maintain in the pool.
# This setting only has an effect if it is positive.
# spring.redis.pool.min-idle=0

# Redis server port.
# spring.redis.port=6379

# Name of Redis server.
# spring.redis.sentinel.master=

# Comma-separated list of host:port pairs.
# spring.redis.sentinel.nodes=

# Connection timeout in milliseconds.
# spring.redis.timeout=0


# -------------------------------------
# TRANSACTION (TransactionProperties)

# Default transaction timeout in seconds.
# spring.transaction.default-timeout=

# Perform the rollback on commit failures.
# spring.transaction.rollback-on-commit-failure=



# -----------------------------------------------------------------------------
# INTEGRATION PROPERTIES
# -----------------------------------------------------------------------------


# -------------------------------------
# ACTIVEMQ (ActiveMQProperties)

# URL of the ActiveMQ broker.
# Auto-generated by default.
# spring.activemq.broker-url=

# Time to wait, in milliseconds, before considering a close complete.
# spring.activemq.close-timeout=15000

# Specify if the default broker URL should be in memory.
# Ignored if an explicit broker has been specified.
# spring.activemq.in-memory=true

# Do not stop message delivery before re-delivering messages from a rolled back transaction.
# This implies that message order will not be preserved when this is enabled.
# spring.activemq.non-blocking-redelivery=false

# Login password of the broker.
# spring.activemq.password=

# Time to wait, in milliseconds, on Message sends for a response.
# Set it to 0 to indicate to wait forever.
# spring.activemq.send-timeout=0

# Login user of the broker.
# spring.activemq.user=

# Trust all packages.
# spring.activemq.packages.trust-all=

# Comma-separated list of specific packages to trust (when not trusting all packages).
# spring.activemq.packages.trusted=

# Block when a connection is requested and the pool is full.
# Set it to false to throw a "JMSException" instead.
# spring.activemq.pool.block-if-full=true

# Blocking period, in milliseconds, before throwing an exception if the pool is still full.
# spring.activemq.pool.block-if-full-timeout=-1

# Create a connection on startup.
# Can be used to warm-up the pool on startup.
# spring.activemq.pool.create-connection-on-startup=true

# Whether a PooledConnectionFactory should be created instead of a regular ConnectionFactory.
# spring.activemq.pool.enabled=false

# Connection expiration timeout in milliseconds.
# spring.activemq.pool.expiry-timeout=0

# Connection idle timeout in milliseconds.
# spring.activemq.pool.idle-timeout=30000

# Maximum number of pooled connections.
# spring.activemq.pool.max-connections=1

# Maximum number of active sessions per connection.
# spring.activemq.pool.maximum-active-session-per-connection=500

# Reset the connection when a "JMXException" occurs.
# spring.activemq.pool.reconnect-on-exception=true

# Time to sleep, in milliseconds, between runs of the idle connection eviction thread.
# When negative, no idle connection eviction thread runs.
# spring.activemq.pool.time-between-expiration-check=-1

# Use only one anonymous "MessageProducer" instance.
# Set it to false to create one "MessageProducer" every time one is required.
# spring.activemq.pool.use-anonymous-producers=true


# -------------------------------------
# ARTEMIS (ArtemisProperties)

# Cluster password.
# Randomly generated on startup by default.
# spring.artemis.embedded.cluster-password=

# Journal file directory.
# Not necessary if persistence is turned off.
# spring.artemis.embedded.data-directory=

# Enable embedded mode if the Artemis server APIs are available.
# spring.artemis.embedded.enabled=true

# Enable persistent store.
# spring.artemis.embedded.persistent=false

# Comma-separated list of queues to create on startup.
# spring.artemis.embedded.queues=

# Server id.
# By default, an auto-incremented counter is used.
# spring.artemis.embedded.server-id=

# Comma-separated list of topics to create on startup.
# spring.artemis.embedded.topics=

# Artemis broker host.
# spring.artemis.host=localhost

# Artemis deployment mode, auto-detected by default.
# spring.artemis.mode=

# Login password of the broker.
# spring.artemis.password=

# Artemis broker port.
# spring.artemis.port=61616

# Login user of the broker.
# spring.artemis.user=


# -------------------------------------
# SPRING BATCH (BatchProperties)

# Create the required batch tables on startup if necessary.
# Enabled automatically if no custom table prefix is set or if a custom schema is configured.
# spring.batch.initializer.enabled=

# Execute all Spring Batch jobs in the context on startup.
# spring.batch.job.enabled=true

# Comma-separated list of job names to execute on startup (For instance `job1,job2`).
# By default, all Jobs found in the context are executed.
# spring.batch.job.names=

# Path to the SQL file to use to initialize the database schema.
# spring.batch.schema=classpath:org/springframework/batch/core/schema-@@platform@@.sql

# Table prefix for all the batch meta-data tables.
# spring.batch.table-prefix=


# -------------------------------------
# JMS (JmsProperties)

# Connection factory JNDI name.
# When set, takes precedence to others
# connection factory auto-configurations.
# spring.jms.jndi-name=

# Acknowledge mode of the container.
# By default, the listener is transacted
# with automatic acknowledgment.
# spring.jms.listener.acknowledge-mode=

# Start the container automatically on startup.
# spring.jms.listener.auto-startup=true

# Minimum number of concurrent consumers.
# spring.jms.listener.concurrency=

# Maximum number of concurrent consumers.
# spring.jms.listener.max-concurrency=

# Specify if the default destination type is topic.
# spring.jms.pub-sub-domain=false

# Default destination to use on send/receive operations that do not have a
# destination parameter.
# spring.jms.template.default-destination=

# Delivery delay to use for send calls in milliseconds.
# spring.jms.template.delivery-delay=

# Delivery mode.
# Enable QoS when set.
# spring.jms.template.delivery-mode=

# Priority of a message when sending.
# Enable QoS when set.
# spring.jms.template.priority=

# Enable explicit QoS when sending a message.
# spring.jms.template.qos-enabled=

# Timeout to use for receive calls in milliseconds.
# spring.jms.template.receive-timeout=

# Time-to-live of a message when sending in milliseconds.
# Enable QoS when set.
# spring.jms.template.time-to-live=


# -------------------------------------
# APACHE KAFKA (KafkaProperties)

# Comma-delimited list of host:port pairs to use for establishing the initial
# connection to the Kafka cluster.
# spring.kafka.bootstrap-servers=

# Id to pass to the server when making requests; used for server-side logging.
# spring.kafka.client-id=

# Frequency in milliseconds that the consumer offsets are auto-committed
# to Kafka if 'enable.auto.commit' true.
# spring.kafka.consumer.auto-commit-interval=

# What to do when there is no initial offset in Kafka or if the current offset
# does not exist any more on the server.
# spring.kafka.consumer.auto-offset-reset=

# Comma-delimited list of host:port pairs to use for establishing
# the initial connection to the Kafka cluster.
# spring.kafka.consumer.bootstrap-servers=

# Id to pass to the server when making requests; used for server-side logging.
# spring.kafka.consumer.client-id=

# If true the consumer's offset will be periodically committed in the background.
# spring.kafka.consumer.enable-auto-commit=

# Maximum amount of time in milliseconds the server will block
# before answering the fetch request if there isn't sufficient data
# to immediately satisfy the requirement given by "fetch.min.bytes".
# spring.kafka.consumer.fetch-max-wait=

# Minimum amount of data the server should return for a fetch request in bytes.
# spring.kafka.consumer.fetch-min-size=

# Unique string that identifies the consumer group this consumer belongs to.
# spring.kafka.consumer.group-id=

# Expected time in milliseconds between heartbeats to the consumer coordinator.
# spring.kafka.consumer.heartbeat-interval=

# Deserializer class for keys.
# spring.kafka.consumer.key-deserializer=

# Maximum number of records returned in a single call to poll().
# spring.kafka.consumer.max-poll-records=

# Deserializer class for values.
# spring.kafka.consumer.value-deserializer=

# Number of records between offset commits when ackMode is "COUNT" or "COUNT_TIME".
# spring.kafka.listener.ack-count=

# Listener AckMode; see the spring-kafka documentation.
# spring.kafka.listener.ack-mode=

# Time in milliseconds between offset commits when ackMode is "TIME" or "COUNT_TIME".
# spring.kafka.listener.ack-time=

# Number of threads to run in the listener containers.
# spring.kafka.listener.concurrency=

# Timeout in milliseconds to use when polling the consumer.
# spring.kafka.listener.poll-timeout=

# Number of acknowledgments the producer requires the leader to have received
# before considering a request complete.
# spring.kafka.producer.acks=

# Number of records to batch before sending.
# spring.kafka.producer.batch-size=

# Comma-delimited list of host:port pairs to use for establishing
# the initial connection to the Kafka cluster.
# spring.kafka.producer.bootstrap-servers=

# Total bytes of memory the producer can use to buffer records waiting
# to be sent to the server.
# spring.kafka.producer.buffer-memory=

# Id to pass to the server when making requests; used for server-side logging.
# spring.kafka.producer.client-id=

# Compression type for all data generated by the producer.
# spring.kafka.producer.compression-type=

# Serializer class for keys.
# spring.kafka.producer.key-serializer=

# When greater than zero, enables retrying of failed sends.
# spring.kafka.producer.retries=

# Serializer class for values.
# spring.kafka.producer.value-serializer=

# Additional properties used to configure the client.
# spring.kafka.properties.*=

# Password of the private key in the key store file.
# spring.kafka.ssl.key-password=

# Location of the key store file.
# spring.kafka.ssl.keystore-location=

# Store password for the key store file.
# spring.kafka.ssl.keystore-password=

# Location of the trust store file.
# spring.kafka.ssl.truststore-location=

# Store password for the trust store file.
# spring.kafka.ssl.truststore-password=

# Default topic to which messages will be sent.
# spring.kafka.template.default-topic=


# -------------------------------------
# RABBIT (RabbitProperties)

# Comma-separated list of addresses to which the client should connect.
# spring.rabbitmq.addresses=

# Number of milliseconds to wait to obtain a channel if the cache size has been reached.
# spring.rabbitmq.cache.channel.checkout-timeout=

# Number of channels to retain in the cache.
# spring.rabbitmq.cache.channel.size=

# Connection factory cache mode.
# spring.rabbitmq.cache.connection.mode=channel

# Number of connections to cache.
# spring.rabbitmq.cache.connection.size=

# Connection timeout, in milliseconds; zero for infinite.
# spring.rabbitmq.connection-timeout=

# Create an AmqpAdmin bean.
# spring.rabbitmq.dynamic=true

# RabbitMQ host.
# spring.rabbitmq.host=localhost

# Acknowledge mode of container.
# spring.rabbitmq.listener.simple.acknowledge-mode=

# Start the container automatically on startup.
# spring.rabbitmq.listener.simple.auto-startup=true

# Minimum number of consumers.
# spring.rabbitmq.listener.simple.concurrency=

# Whether or not to requeue delivery failures; default `true`.
# spring.rabbitmq.listener.simple.default-requeue-rejected=

# How often idle container events should be published in milliseconds.
# spring.rabbitmq.listener.simple.idle-event-interval=

# Maximum number of consumers.
# spring.rabbitmq.listener.simple.max-concurrency=

# Number of messages to be handled in a single request.
# It should be greater than or equal to the transaction size (if used).
# spring.rabbitmq.listener.simple.prefetch=

# Whether or not publishing retries are enabled.
# spring.rabbitmq.listener.simple.retry.enabled=false

# Interval between the first and second attempt to deliver a message.
# spring.rabbitmq.listener.simple.retry.initial-interval=1000

# Maximum number of attempts to deliver a message.
# spring.rabbitmq.listener.simple.retry.max-attempts=3

# Maximum interval between attempts.
# spring.rabbitmq.listener.simple.retry.max-interval=10000

# A multiplier to apply to the previous delivery retry interval.
# spring.rabbitmq.listener.simple.retry.multiplier=1.0

# Whether or not retry is stateless or stateful.
# spring.rabbitmq.listener.simple.retry.stateless=true

# Number of messages to be processed in a transaction.
# For best results it should be less than or equal to the prefetch count.
# spring.rabbitmq.listener.simple.transaction-size=

# Login to authenticate against the broker.
# spring.rabbitmq.password=

# RabbitMQ port.
# spring.rabbitmq.port=5672

# Enable publisher confirms.
# spring.rabbitmq.publisher-confirms=false

# Enable publisher returns.
# spring.rabbitmq.publisher-returns=false

# Requested heartbeat timeout, in seconds; zero for none.
# spring.rabbitmq.requested-heartbeat=

# Enable SSL support.
# spring.rabbitmq.ssl.enabled=false

# Path to the key store that holds the SSL certificate.
# spring.rabbitmq.ssl.key-store=

# Password used to access the key store.
# spring.rabbitmq.ssl.key-store-password=

# Trust store that holds SSL certificates.
# spring.rabbitmq.ssl.trust-store=

# Password used to access the trust store.
# spring.rabbitmq.ssl.trust-store-password=

# SSL algorithm to use.
# By default configure by the rabbit client library.
# spring.rabbitmq.ssl.algorithm=

# Enable mandatory messages.
# spring.rabbitmq.template.mandatory=false

# Timeout for `receive()` methods.
# spring.rabbitmq.template.receive-timeout=0

# Timeout for `sendAndReceive()` methods.
# spring.rabbitmq.template.reply-timeout=5000

# Set to true to enable retries in the `RabbitTemplate`.
# spring.rabbitmq.template.retry.enabled=false

# Interval between the first and second attempt to publish a message.
# spring.rabbitmq.template.retry.initial-interval=1000

# Maximum number of attempts to publish a message.
# spring.rabbitmq.template.retry.max-attempts=3

# Maximum number of attempts to publish a message.
# spring.rabbitmq.template.retry.max-interval=10000

# A multiplier to apply to the previous publishing retry interval.
# spring.rabbitmq.template.retry.multiplier=1.0

# Login user to authenticate to the broker.
# spring.rabbitmq.username=

# Virtual host to use when connecting to the broker.
# spring.rabbitmq.virtual-host=


# -----------------------------------------------------------------------------
# ACTUATOR PROPERTIES
# -----------------------------------------------------------------------------


# -------------------------------------
# ENDPOINTS (AbstractEndpoint subclasses)

# Enable endpoints.
# endpoints.enabled=true

# Default endpoint sensitive setting.
# endpoints.sensitive=

# Enable the endpoint.
# endpoints.actuator.enabled=true

# Endpoint URL path.
# endpoints.actuator.path=

# Enable security on the endpoint.
# endpoints.actuator.sensitive=false

# Enable the endpoint.
# endpoints.auditevents.enabled=

# Endpoint path.
# endpoints.auditevents.path=

# Enable security on the endpoint.
# endpoints.auditevents.sensitive=false

# Enable the endpoint.
# endpoints.autoconfig.enabled=

# Endpoint identifier.
# endpoints.autoconfig.id=

# Endpoint path.
# endpoints.autoconfig.path=

# Mark if the endpoint exposes sensitive information.
# endpoints.autoconfig.sensitive=

# Enable the endpoint.
# endpoints.beans.enabled=

# Endpoint identifier.
# endpoints.beans.id=

# Endpoint path.
# endpoints.beans.path=

# Mark if the endpoint exposes sensitive information.
# endpoints.beans.sensitive=

# Enable the endpoint.
# endpoints.configprops.enabled=

# Endpoint identifier.
# endpoints.configprops.id=

# Keys that should be sanitized.
# Keys can be simple strings that the property ends with or regex expressions.
# endpoints.configprops.keys-to-sanitize=password,secret,key,token,.*credentials.*,vcap_services

# Endpoint path.
# endpoints.configprops.path=

# Mark if the endpoint exposes sensitive information.
# endpoints.configprops.sensitive=

# Enable the curie generation.
# endpoints.docs.curies.enabled=false

# Enable actuator docs endpoint.
# endpoints.docs.enabled=true

#
# endpoints.docs.path=/docs

#
# endpoints.docs.sensitive=false

# Enable the endpoint.
# endpoints.dump.enabled=

# Endpoint identifier.
# endpoints.dump.id=

# Endpoint path.
# endpoints.dump.path=

# Mark if the endpoint exposes sensitive information.
# endpoints.dump.sensitive=

# Enable the endpoint.
# endpoints.env.enabled=

# Endpoint identifier.
# endpoints.env.id=

# Keys that should be sanitized.
# Keys can be simple strings that the property ends with or regex expressions.
# endpoints.env.keys-to-sanitize=password,secret,key,token,.*credentials.*,vcap_services

# Endpoint path.
# endpoints.env.path=

# Mark if the endpoint exposes sensitive information.
# endpoints.env.sensitive=

# Enable the endpoint.
# endpoints.flyway.enabled=

# Endpoint identifier.
# endpoints.flyway.id=

# Mark if the endpoint exposes sensitive information.
# endpoints.flyway.sensitive=

# Enable the endpoint.
# endpoints.health.enabled=

# Endpoint identifier.
# endpoints.health.id=

# Mapping of health statuses to HTTP status codes.
# By default, registered health statuses map to sensible defaults (i.e. UP maps to 200).
# endpoints.health.mapping.*=

# Endpoint path.
# endpoints.health.path=

# Mark if the endpoint exposes sensitive information.
# endpoints.health.sensitive=

# Time to live for cached result, in milliseconds.
# endpoints.health.time-to-live=1000

# Enable the endpoint.
# endpoints.heapdump.enabled=

# Endpoint path.
# endpoints.heapdump.path=

# Mark if the endpoint exposes sensitive information.
# endpoints.heapdump.sensitive=

# Enable hypermedia support for endpoints.
# endpoints.hypermedia.enabled=false

# Enable the endpoint.
# endpoints.info.enabled=

# Endpoint identifier.
# endpoints.info.id=

# Endpoint path.
# endpoints.info.path=

# Mark if the endpoint exposes sensitive information.
# endpoints.info.sensitive=

# Enable Jolokia endpoint.
# endpoints.jolokia.enabled=true

# Endpoint URL path.
# endpoints.jolokia.path=/jolokia

# Enable security on the endpoint.
# endpoints.jolokia.sensitive=true

# Enable the endpoint.
# endpoints.liquibase.enabled=

# Endpoint identifier.
# endpoints.liquibase.id=

# Mark if the endpoint exposes sensitive information.
# endpoints.liquibase.sensitive=

# Enable the endpoint.
# endpoints.logfile.enabled=true

# External Logfile to be accessed.
# endpoints.logfile.external-file=

# Endpoint URL path.
# endpoints.logfile.path=/logfile

# Enable security on the endpoint.
# endpoints.logfile.sensitive=true

# Enable the endpoint.
# endpoints.loggers.enabled=true

# Endpoint identifier.
# endpoints.loggers.id=

# Endpoint path.
# endpoints.loggers.path=/logfile

# Mark if the endpoint exposes sensitive information.
# endpoints.loggers.sensitive=true

# Enable the endpoint.
# endpoints.mappings.enabled=

# Endpoint identifier.
# endpoints.mappings.id=

# Endpoint path.
# endpoints.mappings.path=

# Mark if the endpoint exposes sensitive information.
# endpoints.mappings.sensitive=

# Enable the endpoint.
# endpoints.metrics.enabled=

# Enable the metrics servlet filter.
# endpoints.metrics.filter.enabled=true

# Http filter gauge submissions (merged, per-http-method)
# endpoints.metrics.filter.gauge-submissions=merged

# Http filter counter submissions (merged, per-http-method)
# endpoints.metrics.filter.counter-submissions=merged

# Endpoint identifier.
# endpoints.metrics.id=

# Endpoint path.
# endpoints.metrics.path=

# Mark if the endpoint exposes sensitive information.
# endpoints.metrics.sensitive=

# Enable the endpoint.
# endpoints.shutdown.enabled=

# Endpoint identifier.
# endpoints.shutdown.id=

# Endpoint path.
# endpoints.shutdown.path=

# Mark if the endpoint exposes sensitive information.
# endpoints.shutdown.sensitive=

# Enable the endpoint.
# endpoints.trace.enabled=

# Enable the trace servlet filter.
# endpoints.trace.filter.enabled=true

# Endpoint identifier.
# endpoints.trace.id=

# Endpoint path.
# endpoints.trace.path=

# Mark if the endpoint exposes sensitive information.
# endpoints.trace.sensitive=


# -------------------------------------
# ENDPOINTS CORS CONFIGURATION (EndpointCorsProperties)

# Set whether credentials are supported.
# When not set, credentials are not supported.
# endpoints.cors.allow-credentials=

# Comma-separated list of headers to allow in a request.
# '*' allows all headers.
# endpoints.cors.allowed-headers=

# Comma-separated list of methods to allow.
# '*' allows all methods.
# endpoints.cors.allowed-methods=GET

# Comma-separated list of origins to allow.
# '*' allows all origins.
# When not set, CORS support is disabled.
# endpoints.cors.allowed-origins=

# Comma-separated list of headers to include in a response.
# endpoints.cors.exposed-headers=

# How long, in seconds, the response from a pre-flight request can be cached by clients.
# endpoints.cors.max-age=1800


# -------------------------------------
# JMX ENDPOINT (EndpointMBeanExportProperties)

# JMX domain name.
# Initialized with the value of 'spring.jmx.default-domain' if set.
# endpoints.jmx.domain=

# Enable JMX export of all endpoints.
# endpoints.jmx.enabled=true

# Additional static properties to append to all ObjectNames of MBeans
# representing Endpoints.
# endpoints.jmx.static-names=

# Ensure that ObjectNames are modified in case of conflict.
# endpoints.jmx.unique-names=false


# -------------------------------------
# JOLOKIA (JolokiaProperties)

# See Jolokia manual
# jolokia.config.*=


# -------------------------------------
# MANAGEMENT HTTP SERVER (ManagementServerProperties)

# Add the "X-Application-Context" HTTP header in each response.
# management.add-application-context-header=true

# Network address that the management endpoints should bind to.
# management.address=

# Management endpoint context-path.
# For instance `/actuator`
# management.context-path=

# Enable extended Cloud Foundry actuator endpoints
# management.cloudfoundry.enabled=

# Skip SSL verification for Cloud Foundry actuator endpoint security calls
# management.cloudfoundry.skip-ssl-validation=

# Management endpoint HTTP port.
# Uses the same port as the application by default.
# Configure a different port to use management-specific SSL.
# management.port=

# Enable security.
# management.security.enabled=true

# Comma-separated list of roles that can access the management endpoint.
# management.security.roles=ACTUATOR

# Session creating policy to use (always, never, if_required, stateless).
# management.security.sessions=stateless

# Supported SSL ciphers.
# Requires a custom management.port.
# management.ssl.ciphers=

# Whether client authentication is wanted ("want") or needed ("need").
# Requires a trust store.
# Requires a custom management.port.
# management.ssl.client-auth=

# Enable SSL support.
# Requires a custom management.port.
# management.ssl.enabled=

# Enabled SSL protocols.
# Requires a custom management.port.
# management.ssl.enabled-protocols=

# Alias that identifies the key in the key store.
# Requires a custom management.port.
# management.ssl.key-alias=

# Password used to access the key in the key store.
# Requires a custom management.port.
# management.ssl.key-password=

# Path to the key store that holds the SSL certificate (typically a jks file).
# Requires a custom management.port.
# management.ssl.key-store=

# Password used to access the key store.
# Requires a custom management.port.
# management.ssl.key-store-password=

# Provider for the key store.
# Requires a custom management.port.
# management.ssl.key-store-provider=

# Type of the key store.
# Requires a custom management.port.
# management.ssl.key-store-type=

# SSL protocol to use.
# Requires a custom management.port.
# management.ssl.protocol=TLS

# Trust store that holds SSL certificates.
# Requires a custom management.port.
# management.ssl.trust-store=

# Password used to access the trust store.
# Requires a custom management.port.
# management.ssl.trust-store-password=

# Provider for the trust store.
# Requires a custom management.port.
# management.ssl.trust-store-provider=

# Type of the trust store.
# Requires a custom management.port.
# management.ssl.trust-store-type=


# -------------------------------------
# HEALTH INDICATORS

# Enable database health check.
# management.health.db.enabled=true

# Enable cassandra health check.
# management.health.cassandra.enabled=true

# Enable couchbase health check.
# management.health.couchbase.enabled=true

# Enable default health indicators.
# management.health.defaults.enabled=true

# Enable disk space health check.
# management.health.diskspace.enabled=true

# Path used to compute the available disk space.
# management.health.diskspace.path=

# Minimum disk space that should be available, in bytes.
# management.health.diskspace.threshold=0

# Enable elasticsearch health check.
# management.health.elasticsearch.enabled=true

# Comma-separated index names.
# management.health.elasticsearch.indices=

# The time, in milliseconds, to wait for a response from the cluster.
# management.health.elasticsearch.response-timeout=100

# Enable JMS health check.
# management.health.jms.enabled=true

# Enable LDAP health check.
# management.health.ldap.enabled=true

# Enable Mail health check.
# management.health.mail.enabled=true

# Enable MongoDB health check.
# management.health.mongo.enabled=true

# Enable RabbitMQ health check.
# management.health.rabbit.enabled=true

# Enable Redis health check.
# management.health.redis.enabled=true

# Enable Solr health check.
# management.health.solr.enabled=true

# Comma-separated list of health statuses in order of severity.
# management.health.status.order=DOWN, OUT_OF_SERVICE, UP, UNKNOWN


# -------------------------------------
# INFO CONTRIBUTORS (InfoContributorProperties)

# Enable build info.
# management.info.build.enabled=true

# Enable default info contributors.
# management.info.defaults.enabled=true

# Enable environment info.
# management.info.env.enabled=true

# Enable git info.
# management.info.git.enabled=true

# Mode to use to expose git information.
# management.info.git.mode=simple


# -------------------------------------
# REMOTE SHELL (ShellProperties)

# Authentication type.
# Auto-detected according to the environment.
# management.shell.auth.type=simple

# JAAS domain.
# management.shell.auth.jaas.domain=my-domain

# Path to the authentication key.
# This should point to a valid ".pem" file.
# management.shell.auth.key.path=

# Login user.
# management.shell.auth.simple.user.name=user

# Login password.
# management.shell.auth.simple.user.password=

# Comma-separated list of required roles to login to the CRaSH console.
# management.shell.auth.spring.roles=ACTUATOR

# Patterns to use to look for commands.
# management.shell.command-path-patterns=classpath*:/commands/**,classpath*:/crash/commands/**

# Scan for changes and update the command if necessary (in seconds).
# management.shell.command-refresh-interval=-1

# Patterns to use to look for configurations.
# management.shell.config-path-patterns=classpath*:/crash/*

# Comma-separated list of commands to disable.
# management.shell.disabled-commands=jpa*,jdbc*,jndi*

# Comma-separated list of plugins to disable.
# Certain plugins are disabled by default based on the environment.
# management.shell.disabled-plugins=

# Number of milliseconds after user will be prompted to login again.
# management.shell.ssh.auth-timeout =

# Enable CRaSH SSH support.
# management.shell.ssh.enabled=true

# Number of milliseconds after which unused connections are closed.
# management.shell.ssh.idle-timeout =

# Path to the SSH server key.
# management.shell.ssh.key-path=

# SSH port.
# management.shell.ssh.port=2000

# Enable CRaSH telnet support.
# Enabled by default if the TelnetPlugin is available.
# management.shell.telnet.enabled=false

# Telnet port.
# management.shell.telnet.port=5000


# -------------------------------------
# TRACING (TraceProperties)

# Items to be included in the trace.
# management.trace.include=request-headers,response-headers,cookies,errors


# -------------------------------------
# METRICS EXPORT (MetricExportProperties)

# Pattern that tells the aggregator what to do with the keys from the source repository.
# spring.metrics.export.aggregate.key-pattern=

# Prefix for global repository if active.
# spring.metrics.export.aggregate.prefix=

# Delay in milliseconds between export ticks.
# Metrics are exported to external sources on a schedule with this delay.
# spring.metrics.export.delay-millis=5000

# Flag to enable metric export (assuming a MetricWriter is available).
# spring.metrics.export.enabled=true

# List of patterns for metric names to exclude.
# Applied after the includes.
# spring.metrics.export.excludes=

# List of patterns for metric names to include.
# spring.metrics.export.includes=

# Key for redis repository export (if active).
# spring.metrics.export.redis.key=keys.spring.metrics

# Prefix for redis repository if active.
# spring.metrics.export.redis.prefix=spring.metrics

# Flag to switch off any available optimizations based on not exporting
# unchanged metric values.
# spring.metrics.export.send-latest=

# Host of a statsd server to receive exported metrics.
# spring.metrics.export.statsd.host=

# Port of a statsd server to receive exported metrics.
# spring.metrics.export.statsd.port=8125

# Prefix for statsd exported metrics.
# spring.metrics.export.statsd.prefix=

# Specific trigger properties per MetricWriter bean name.
# spring.metrics.export.triggers.*=


# -----------------------------------------------------------------------------
# DEVTOOLS PROPERTIES
# -----------------------------------------------------------------------------


# -------------------------------------
# DEVTOOLS (DevToolsProperties)

# Enable a livereload.com compatible server.
# spring.devtools.livereload.enabled=true

# Server port.
# spring.devtools.livereload.port=35729

# Additional patterns that should be excluded from triggering a full restart.
# spring.devtools.restart.additional-exclude=

# Additional paths to watch for changes.
# spring.devtools.restart.additional-paths=

# Enable automatic restart.
# spring.devtools.restart.enabled=true

# Patterns that should be excluded from triggering a full restart.
# spring.devtools.restart.exclude=META-INF/maven/**,META-INF/resources/**,resources/**,static/**,public/**,templates/**,**/*Test.class,**/*Tests.class,git.properties

# Amount of time (in milliseconds) to wait between polling for classpath changes.
# spring.devtools.restart.poll-interval=1000

# Amount of quiet time (in milliseconds) required without any classpath
# changes before a restart is triggered.
# spring.devtools.restart.quiet-period=400

# Name of a specific file that when changed will trigger the restart check.
# If not specified any classpath file change will trigger the restart.
# spring.devtools.restart.trigger-file=


# -------------------------------------
# REMOTE DEVTOOLS (RemoteDevToolsProperties)

# Context path used to handle the remote connection.
# spring.devtools.remote.context-path=/.~~spring-boot!~

# Enable remote debug support.
# spring.devtools.remote.debug.enabled=true

# Local remote debug server port.
# spring.devtools.remote.debug.local-port=8000

# The host of the proxy to use to connect to the remote application.
# spring.devtools.remote.proxy.host=

# The port of the proxy to use to connect to the remote application.
# spring.devtools.remote.proxy.port=

# Enable remote restart.
# spring.devtools.remote.restart.enabled=true

# A shared secret required to establish a connection (required to enable remote support).
# spring.devtools.remote.secret=

# HTTP header used to transfer the shared secret.
# spring.devtools.remote.secret-header-name=X-AUTH-TOKEN


# -----------------------------------------------------------------------------
# TESTING PROPERTIES
# -----------------------------------------------------------------------------


# Type of existing DataSource to replace.
# spring.test.database.replace=any

# MVC Print option.
# spring.test.mockmvc.print=default
